# .github/workflows/frontend-ci.yml 파일 내용

name: Frontend CI Pipeline

on:
  push:
    branches:
      - dev # dev 브랜치에 푸시될 때 실행
      - main    # main 브랜치에 푸시될 때 실행 (release 후 merge 시)
  pull_request:
    branches:
      - dev # dev 브랜치로 PR 생성/업데이트 시 실행

jobs:
  build-frontend: # 프론트엔드 빌드 작업
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # GitHub 저장소 코드 체크아웃

      - name: Set up Node.js 18.x # Node.js 환경 설정 (Vite는 최신 Node.js 버전 권장, 18.x 또는 20.x 선택)
        uses: actions/setup-node@v4
        with:
          node-version: '18.x' # Node.js 18 버전 사용
          cache: 'npm' # npm 캐시 활성화 (의존성 설치 시간 단축)

      - name: Install Dependencies # 의존성 설치
        run: npm install # package.json에 정의된 모든 의존성 설치

      - name: Build Frontend # 프론트엔드 빌드 (Vite 프로젝트는 'npm run build'가 기본)
        run: npm run build

      # --- 선택 사항 ---
      # 만약 프론트엔드에 테스트 코드가 있다면 아래 주석을 풀고 사용
      # - name: Run Frontend Tests
      #   run: npm test # 또는 'npm run test:ci' 등 프로젝트에 맞는 테스트 명령어 사용

      # --- Discord 알림 추가 ---
      - name: Send Discord Notification # Discord 알림
        if: always() # 빌드 성공, 실패, 취소와 상관없이 항상 실행
        uses: appleboy/discord-action@v1.2.0 # Discord 알림 액션 사용
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }} # GitHub Secrets에 저장된 웹훅 URL 사용
          username: 'GitHub Actions Frontend Bot' # Discord에 표시될 봇 이름
          avatar_url: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png'
          message: |
            **Frontend CI Pipeline Status**
            Repository: `${{ github.repository }}`
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            Status: `${{ job.status }}`
            <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>
          # color: ${{ job.status == 'success' && '#00FF00' || job.status == 'failure' && '#FF0000' || '#FFFF00' }}